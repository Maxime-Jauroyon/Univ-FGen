package com.ustudents.fgen;

import com.ustudents.fgen.common.Program;
import com.ustudents.fgen.common.json.Json;
import com.ustudents.fgen.common.logs.Out;
import com.ustudents.fgen.common.options.Command;
import com.ustudents.fgen.common.options.Option;
import com.ustudents.fgen.generators.Generator;
import com.ustudents.fgen.gui.Application;

/**
 * Program class.
 * Contains the core execution of the project.
 */
@Command(name = "fgen", version = "1.0.0", description =
        "A tool to generate fractals based on various sets of parameters.\n" +
        "Fractals can be generated by providing a configuration file or through a GUI.")
public class FGen extends Program {
    @Option(names = {"-t", "--type"}, description = "Defines which type of view to use.", usage = "\"cli\" or \"gui\"")
    public String type = "cli";

    @Option(names = {"-f", "--load-file"}, description = "Loads and run a configuration file stored at <filepath>.", usage = "<filepath>")
    public String loadFilepath = null;

    @Option(names = {"-p", "--load-preset"}, description = "Loads and run a configuration preset file.", usage = "\"sample\", \"icon\", \"aa\" or \"mandelbrot\"")
    public String presetName = null;

    @Option(names = {"-s", "--save"}, description = "Defines a filepath to save the loaded configuration.", usage = "<filepath>")
    public String saveFilepath = null;

    @Option(names = {"-l", "--load-only"}, description =
            "Defines that the loaded configuration should not be run.\n" +
            "Useful if you want to only load and save a configuration.")
    protected boolean shouldOnlyLoad = false;

    /** The currently loaded configuration file. */
    public Configuration loadedConfiguration = null;

    @Override
    protected int main(String[] args) {
        /* Loads a configuration, either from a path, a preset or from code. */
        if (loadFilepath != null) {
            load(loadFilepath, false);
        } else if (presetName != null) {
            loadedConfiguration = Json.deserializeFromResources("/presets/" + presetName + ".json", Configuration.class);

            if (loadedConfiguration == null) {
                Out.printError("Trying to load an unknown preset!");
            }
        } else {
            loadedConfiguration = new Configuration();
        }

        /* Defines the save's filepath if possible. */
        if (saveFilepath == null && loadFilepath != null) {
            saveFilepath = loadFilepath;
        }

        /* Saves the configuration to the given path if necessary. */
        if (saveFilepath != null && loadedConfiguration != null) {
            Json.serialize(saveFilepath, loadedConfiguration);
        }

        /* Main logic. */
        if (type.equals("gui")) {
            /* Launch the GUI. */
            Application.mainApplication(args);
        } else if (loadedConfiguration != null) {
            /* Generates all Generators within the Configuration. */
            if (!shouldOnlyLoad) {
                for (Generator generator : loadedConfiguration.generators) {
                    generator.generate();
                }
            }
        }

        return 0;
    }

    public void load(String filepath, boolean changeSaveFilepath) {
        loadedConfiguration = Json.deserialize(filepath, Configuration.class);

        if (changeSaveFilepath) {
            saveFilepath = filepath;
        }
    }

    public static FGen get() {
        return (FGen)Program.get();
    }
}