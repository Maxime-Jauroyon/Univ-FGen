package com.ustudents.fgen;

import com.ustudents.fgen.common.Program;
import com.ustudents.fgen.common.json.Json;
import com.ustudents.fgen.common.logs.Out;
import com.ustudents.fgen.common.options.Command;
import com.ustudents.fgen.common.options.Option;

import java.time.Duration;

@Command(name = "fgen", version = "1.0.0", description =
        "A tool to generate fractals based on various sets of parameters.\n" +
        "Fractals can be generated by providing a configuration file or through a GUI.")
public class FGen extends Program {
    @Option(names = {"-t", "--type"}, description = "Defines which type of view to use.", usage = "\"gui\" or \"cli\"")
    protected static String type = "cli";

    @Option(names = {"-f", "--load-file"}, description = "Loads and run a configuration file stored at <filepath>.", usage = "<filepath>")
    protected static String loadFilepath = null;

    @Option(names = {"-p", "--load-preset"}, description = "Loads and run a configuration preset file.", usage = "\"default\"")
    protected static String presetName = null;

    @Option(names = {"-s", "--save"}, description = "Defines a filepath to save the loaded configuration.", usage = "<filepath>")
    protected static String saveFilepath = null;

    @Option(names = {"-l", "--load-only"}, description =
            "Defines that the loaded configuration should not be run.\n" +
            "Useful if you want to only load and save a configuration.")
    protected static boolean shouldOnlyLoad = false;

    public static Duration calculationHandlerDuration = Duration.ZERO;
    public static Duration imageHandlerDuration = Duration.ZERO;
    public static Duration gifCreation = Duration.ZERO;

    @Override
    protected int main(String[] args) {
        Configuration configuration = null;

        if (loadFilepath != null) {
            configuration = Json.deserialize(loadFilepath, Configuration.class);
        }

        Out.println(configuration);

        if (type.equals("gui")) {
            FGenGui.launchFgen(args);
        } else {
            /*Benchmark benchmark = new Benchmark();
            Fractal fractal = new JuliaSet(new Complex(0.285, 0.01));
            ComplexPlane plane = new ComplexPlane(new Complex(-1,1), new Complex(1,-1), 0.001);
            //CalculationHandler calculationHandler = new SingleCalculationHandler(fractal, plane, 1000, 2);
            CalculationHandler calculationHandler = new PoolCalculationHandler(fractal, plane, 1000, 2);
            Generator generator = new JpegGenerator(calculationHandler, "fractal.jpeg");
            generator.generate(4096, 4096);
            System.out.println(benchmark.end());*/

            /*Fractal fractal = new MandelbrotSet();
            ComplexPlane plane = new ComplexPlane(new Complex(-1,1), new Complex(1,-1), 0.0006);
            //CalculationHandler calculationHandler = new SimpleCalculationHandler(fractal, plane, 1000, 2);
            //ImageHandler imageHandler = new SimpleImageHandler();
            CalculationHandler calculationHandler = new SimpleCalculationHandler(fractal, plane, 100, 2);
            ImageHandler imageHandler = new SimpleImageHandler(new HsbColorHandler());
            JpegGenerator jpegGenerator = new JpegGenerator(calculationHandler, imageHandler, "fgen-" + 0 + ".jpeg");
            jpegGenerator.generate(4096, 4096, 1024, 0);

            Out.println(String.format("CalculationHandler %s", calculationHandlerDuration));
            Out.println(String.format("ImageHandler %s", imageHandlerDuration));
            Out.println(String.format("GifCreation %s", gifCreation));*/
        }

        return 0;
    }

    public static FGen get() {
        return (FGen)Program.get();
    }
}